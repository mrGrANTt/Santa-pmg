import signal
import sqlite3
import sys
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.client.bot import DefaultBotProperties
import random
import asyncio
import os
import shutil
import Vareable
from aiogram.utils.keyboard import InlineKeyboardBuilder

# Initializing the bot and dispatcher with async functionality
bot = Bot(token=Vareable.BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

secret_santa_db = "secret_santa.db"

# Database setup
conn = sqlite3.connect(secret_santa_db)
cursor = conn.cursor()

# Creating tables
cursor.execute('''CREATE TABLE IF NOT EXISTS players (
    user_id INTEGER PRIMARY KEY,
    username TEXT NOT NULL,
    name TEXT NOT NULL,
    preferences TEXT
)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS pairs (
    giver_id INTEGER,
    receiver_id INTEGER,
    FOREIGN KEY (giver_id) REFERENCES players (user_id),
    FOREIGN KEY (receiver_id) REFERENCES players (user_id)
)''')
cursor.execute("PRAGMA journal_mode=WAL;")
conn.commit()

welcomeMsg = '''üéÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É! üéÖ

üìú –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:

   üî∏ –ù–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –º–µ—Å—è—Ü–∞ –¥–∞—Ä–∏–º –º–∏–Ω–∏-–ø–æ–¥–∞—Ä–∫–∏ –≤—ã–ø–∞–≤—à–∏–º –ª—é–¥—è–º, –∞ –∑–∞ –Ω–µ–¥–µ–ª—é-–¥–≤–µ –¥–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞ –æ—Ç–¥–∞—ë–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ üéÅ

   üî∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞: 500 —Ä—É–±. (–º–µ–Ω—å—à–µ –Ω–µ–ª—å–∑—è, –±–æ–ª—å—à–µ –º–æ–∂–Ω–æ) üí∏

   üî∏ –ú–∏–Ω–∏-–ø–æ–¥–∞—Ä–∫–∏ –Ω–µ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –û–Ω–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –Ω–æ –±—É–¥—É—Ç –ø—Ä–∏—è—Ç–Ω—ã! üß∏

   üî∏ –°–æ–∑–¥–∞–Ω–∞ [–≥—Ä—É–ø–ø–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤](https://t.me/+jcwpkICx4D0zNmUy). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å üì¢

   üî∏ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /admin üóø

   üî∏ –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∏–≥—Ä—É –≤–≤–µ–¥–∏—Ç–µ /join –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏  üß∞
'''

importentMag = '''        ‚ÄºÔ∏è‚ÄºÔ∏è –í–ê–ñ–ù–û ‚ÄºÔ∏è‚ÄºÔ∏è

üîí –ù–∏–∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å, –∫—Ç–æ –∫–æ–º—É –¥–∞—Ä–∏—Ç. –ü–æ–¥–∞—Ä–∫–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ, –∑–∞–∫–∏–¥—ã–≤–∞—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏–ª–∏ –ø—Ä—è—Ç–∞—Ç—å –∫–∞–∫ –∑–∞–∫–ª–∞–¥–∫–∏ –∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –º–µ—Å—Ç–æ –º–µ—Å—Ç–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /send –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å! –¢–∞–∫ –±—É–¥–µ—Ç –≤–µ—Å–µ–ª–µ–µ üôÉ
'''


# State machine for the join command
class JoinGameState(StatesGroup):
    waiting_for_name = State()
    waiting_for_preferences = State()


# Register a new player
@dp.message(Command("start"))
async def start(message: Message):
    await bot.send_message(message.chat.id, welcomeMsg, disable_web_page_preview=True, parse_mode="Markdown")
    await bot.send_message(message.chat.id, importentMag)


@dp.message(Command("join"))
async def start_join(message: Message, state: FSMContext):
    if Vareable.GAME_STARTED != 0:
        await message.answer("–°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ, –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å (.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.", reply_markup=getKeyboard())
    await state.set_state(JoinGameState.waiting_for_name)


@dp.message(JoinGameState.waiting_for_name)
async def enter_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.", reply_markup=getKeyboard())
    await state.set_state(JoinGameState.waiting_for_preferences)


@dp.message(JoinGameState.waiting_for_preferences)
async def enter_preferences(message: Message, state: FSMContext):
    preferences = message.text
    user_data = await state.get_data()
    name = user_data['name']
    user_id = message.from_user.id
    username = message.from_user.username

    if not username:
        username = message.from_user.first_name

    # Saving user data to the database
    cursor.execute(
        "INSERT OR REPLACE INTO players (user_id, username, name, preferences) VALUES (?, ?, ?, ?)",
        (user_id, username, name, preferences)
    )
    conn.commit()

    await message.answer(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É!\n–ò–º—è: {name}\n–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}")
    await bot.send_message(Vareable.ADMIN_ID,
                           f"–ò–≥—Ä–æ–∫ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Ç–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É!\n–ò–º—è: {name}\n–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}")
    await state.clear()


# Leave the game
@dp.message(Command("leave"))
async def leave_game(message: Message):
    if Vareable.GAME_STARTED != 0:
        await message.answer("–°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ, –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å (.")
        return
    user_id = message.from_user.id
    cursor.execute("DELETE FROM players WHERE user_id = ?", (user_id,))
    conn.commit()
    await message.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ç–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É (")
    await bot.send_message(Vareable.ADMIN_ID, f"{user_id} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É (")


class MsgState(StatesGroup):
    message = State()


# Send anonymous message to assigned person
@dp.message(Command("send"))
async def send_anonymous_message(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=getKeyboard())
    await state.set_state(MsgState.message)


@dp.message(MsgState.message)
async def enter_name(message: Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute("SELECT receiver_id FROM pairs WHERE giver_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
        await state.clear()
        return
    receiver_id = result[0]
    await bot.send_message(receiver_id, f"–í–∞–º –ø–∏—à–µ—Ç –°–∞–Ω—Ç–∞: {message.text}")
    await state.clear()


class AdmMsgState(StatesGroup):
    message = State()


def getKeyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="[‚ùå]-–æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cansel")
    keyboard.adjust(1)
    return keyboard.as_markup()


# Message admin
@dp.message(Command("admin"))
async def message_admin(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=getKeyboard())
    await state.set_state(AdmMsgState.message)


@dp.message(AdmMsgState.message)
async def message_admin(message: Message, state: FSMContext):
    username = message.from_user.username
    if not username:
        username = message.from_user.first_name

    await bot.send_message(Vareable.ADMIN_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}: {message.text}")
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.")
    await state.clear()


# Admin: View list of players
@dp.message(Command("list"))
async def list_players(message: Message):
    if message.from_user.id != Vareable.ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ!")
        return

    cursor.execute("SELECT name, preferences, user_id FROM players")
    players = cursor.fetchall()
    if not players:
        await message.answer("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ.")
    else:
        response = "–ò–≥—Ä–æ–∫–∏:\n\n" + "\n".join([f"`{p[2]}` ({p[0]}) - {p[1]}\n\n" for p in players])
        await message.answer(response, parse_mode="Markdown")


# Admin: Remove a player
@dp.message(Command("remove"))
async def remove_player(message: Message):
    if message.from_user.id != Vareable.ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ!")
        return

    username = message.text.split(' ', 1)[1].strip() if ' ' in message.text else ''
    cursor.execute("DELETE FROM players WHERE user_id = ?", (username,))
    conn.commit()
    await message.answer(f"–ò–≥—Ä–æ–∫ c id '{username}' —É–¥–∞–ª—ë–Ω –∏–∑ –∏–≥—Ä—ã.")


class PlrSendMsg(StatesGroup):
    msg = State()
    plrId = State()


@dp.message(Command("send_plr"))
async def start_join(message: Message, state: FSMContext):
    if message.from_user.id != Vareable.ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ!")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—É—á–∞—Ç–µ–ª—è.", reply_markup=getKeyboard())
    await state.set_state(PlrSendMsg.plrId)


@dp.message(PlrSendMsg.plrId)
async def enter_plrId(message: Message, state: FSMContext):
    await state.update_data(plrId=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ c–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=getKeyboard())
    await state.set_state(PlrSendMsg.msg)


@dp.message(PlrSendMsg.msg)
async def enter_preferences(message: Message, state: FSMContext):
    msg = message.text
    user_data = await state.get_data()
    plrId = user_data['plrId']

    await bot.send_message(plrId, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞: " + msg)
    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await state.clear()


# Admin: Start distribution
@dp.message(Command("distribute"))
async def distribute_pairs(message: Message):
    if message.from_user.id != Vareable.ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ!")
        return
    cursor.execute("SELECT user_id FROM players")
    user_ids = [row[0] for row in cursor.fetchall()]
    if len(user_ids) < 2:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—é–¥–µ–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!")
        return

    # Shuffle and assign pairs
    random.shuffle(user_ids)
    pairs = list(zip(user_ids, user_ids[1:] + [user_ids[0]]))  # Circular pairing

    # Store pairs in the database
    cursor.execute("DELETE FROM pairs")
    cursor.executemany("INSERT INTO pairs (giver_id, receiver_id) VALUES (?, ?)", pairs)
    conn.commit()

    # Notify each player of their assigned person
    for giver_id, receiver_id in pairs:
        cursor.execute("SELECT name, preferences FROM players WHERE user_id = ?", (receiver_id,))
        receiver_info = cursor.fetchone()
        await bot.send_message(giver_id,
                               f"–í—ã –¥–∞—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è: {receiver_info[0]},\n\n –ï–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {receiver_info[1]}")

    Vareable.GAME_STARTED = 1
    await message.answer("–ò–≥—Ä–æ–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!")


# Admin: Send global message
@dp.message(Command("broadcast"))
async def broadcast_message(message: Message):
    if message.from_user.id != Vareable.ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ!")
        return

    await bot.send_message(Vareable.ADMIN_ID, "Stopping proces!")
    text = message.text.split(' ', 1)[1] if ' ' in message.text else ''
    if not text:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    cursor.execute("SELECT user_id FROM players")
    for (user_id,) in cursor.fetchall():
        await bot.send_message(user_id, f"–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")


# Admin: Send global message
@dp.message(Command("stop"))
async def broadcast_message(message: Message):
    if message.from_user.id != Vareable.ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ!")
        return
    await stopping()



@dp.callback_query(lambda callback: callback.data == "cansel")
async def handle_button_click(callback_query: CallbackQuery, state: FSMContext):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ª—é–±—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥
    await state.clear()
    await bot.send_message(callback_query.from_user.id, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω!")


async def runBot():
    print("runBot")
    cursor.execute("SELECT receiver_id FROM pairs LIMIT 1")
    result = cursor.fetchone()
    if result:
        Vareable.GAME_STARTED = 1
    await dp.start_polling(bot)


enabled = 1


async def copy_db_periodically(src):
    next_run = datetime.now() + timedelta(hours=Vareable.INTERVAL)
    while enabled != 0:
        now = datetime.now()
        if now >= next_run:
            try:
                dst_dir = f"backup/{datetime.now().date()}"
                dst = os.path.join(dst_dir, f"secret_santa-{datetime.now().hour}") + ".db"
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
                if not os.path.exists(dst_dir):
                    os.makedirs(dst_dir)
                if os.path.exists(src) and os.access(src, os.R_OK):

                    shutil.copy2(src, dst)  # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    await bot.send_message(Vareable.ADMIN_ID, f"–§–∞–π–ª {src} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {dst}.")
                else:
                    await bot.send_message(Vareable.ADMIN_ID, f"–§–∞–π–ª {src} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è.")
            except Exception as e:
                await bot.send_message(Vareable.ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            finally:
                next_run = datetime.now() + timedelta(hours=Vareable.INTERVAL)

        # –ñ–¥–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        await asyncio.sleep(60)


# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞
async def backUp():
    print("beckUp")
    await copy_db_periodically(secret_santa_db)


async def stopping():
    print("Stopping proces, wait for a minute...")
    await bot.send_message(Vareable.ADMIN_ID, "Stopping proces, wait for a minute...")

    await dp.stop_polling()
    global enabled
    enabled = 0

async def main():
    bot_task = asyncio.create_task(runBot())
    backup_task = asyncio.create_task(backUp())

    try:
        await asyncio.gather(bot_task, backup_task)
    except KeyboardInterrupt:
        await stopping()

if __name__ == "__main__":
    asyncio.run(main())
